import psycopg2
import numpy as np
import scipy.stats


def filename(FILE):
    FILE = FILE.replace('\\','/')
    FILE = FILE.replace('\r','/r')
    FILE = FILE.replace('\t','/t')
    FILE = FILE.replace('\f','/f')
    return FILE


if __name__=="__main__":
    
    
    cities = (('Vilnius', 118), ('Valencia', 137), ('Goteborg', 38))
    lum = 'lum_500m'
    nach = 'NACH'
    operators = ('avg', 'mltp', 'or', 'and')
    
    print 'Making database connection...',
    try: con = psycopg2.connect(database='dbname', user='username', password = 'password', host = 'host.com')     
    except psycopg2.DatabaseError, e: print 'Error %s' % e
    print 'successful.' 
    
    for cityname, val in cities:
        
        actual = []
        cur = con.cursor()
        query = """SELECT 	CASE WHEN rec_usage > {1} THEN 1
                                ELSE rec_usage / {1}
                                END
                                FROM usn_{0};""".format(cityname, float(val))
        cur.execute(query)
        for record in cur:
            actual.append(float(record[0]))
        
        greenness = []
        query = """SELECT (usn_{0}.greenness - m.minimum) / (n.maximum - m.minimum) AS g
                   FROM usn_{0}, (SELECT min(greenness) AS minimum 
                                       FROM usn_{0}) AS m,
                                      (SELECT max(greenness) AS maximum
                                       FROM usn_{0}) AS n;""".format(cityname)
                                
        cur.execute(query)
        for record in cur:
            greenness.append(float(record[0]))
            
        density = []
        query = """SELECT (usn_{0}.res_density) / (n.maximum) AS d
                   FROM usn_{0}, (SELECT max(res_density) AS maximum
                                       FROM usn_{0}) AS n;""".format(cityname)
                                       
        cur.execute(query)
        for record in cur:
            density.append(float(record[0]))                               
                                               
            
        for op in operators:
                    
            landusemix = []
            
#            query = """SELECT {0}, id FROM usn_{1}""".format(lum, cityname)
            query = """SELECT (usn_{1}.{0}) / (n.maximum) AS l
                   FROM usn_{1}, (SELECT max({0}) AS maximum
                                       FROM usn_{1}) AS n;""".format(lum, cityname)
            cur.execute(query)
            for record in cur:
                landusemix.append(float(record[0]))
            

            centrality = []
#            query = """SELECT {0}/2, id FROM usn_{1}""".format(nach, cityname)
            query = """SELECT (usn_{1}.{0}) / (n.maximum) AS c
                   FROM usn_{1}, (SELECT max({0}) AS maximum
                                       FROM usn_{1}) AS n;""".format(nach, cityname)
            cur.execute(query)
            for record in cur:
                centrality.append(float(record[0]))
                
            greenness = np.array(greenness)
            landusemix = np.array(landusemix)
            centrality = np.array(centrality)
            density = np.array(density)
            actual = np.array(actual)
            
            if op == 'avg':
                potential = (greenness+ landusemix + centrality + density) / 4
            elif op == 'mltp':
                potential = (greenness * landusemix * centrality * density)**0.25
            elif op == 'or':
                potential = np.maximum.reduce([greenness, landusemix, centrality, density])
            elif op == 'and':
                potential = np.minimum.reduce([greenness, landusemix, centrality, density])
                
            f = open(filename('...\plots\results_{0}_{1}.txt'.format(cityname, op)), 'w')                        
            for i, j in zip(actual, potential):
                line =  '{0}, {1}\n'.format(i, j)
                f.write(line)
            print cityname, op
            f.close()
        
    con.close()
        
    
    
